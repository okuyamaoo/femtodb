package femtodb.core;/**  * FemtoDBConstantsクラス<br> * * @author Takahiro Iwase * @license Apache License 2.0  */public class FemtoDBConstants {    public static boolean isBuilded = false;    //     public static void build(String[] startOptions) {        if (isBuilded == false) {            // 起動引数は "-項目名 値"のフォーマット            StringBuilder strBuf = new StringBuilder();            for (int i = 0; i < startOptions.length; i++) {                strBuf.append(" ");                strBuf.append(startOptions[i]);                // TRANSACTION_LOG_WRITE                if (startOptions[i].trim().equals("-tlw")) {                    if (startOptions.length > (i+1)) {                        if (startOptions[i+1].equals("true")) {                            TRANSACTION_LOG_WRITE = true;                        }                    }                }                // TRANSACTION_LOG                if (startOptions[i].trim().equals("-tl")) {                    if (startOptions.length > (i+1)) {                        if (!startOptions[i+1].equals("")) {                            TRANSACTION_LOG = startOptions[i+1];                        }                    }                }                // HTTP_SERVER_PORT                if (startOptions[i].trim().equals("-httpport")) {                    if (startOptions.length > (i+1)) {                        if (!startOptions[i+1].equals("")) {                            try {                                int newHttpPort = new Integer(startOptions[i+1]);                                HTTP_SERVER_PORT = newHttpPort;                            } catch (Exception e) {                            }                        }                    }                }                // HTTP_SERVER_MAXTHREADS                if (startOptions[i].trim().equals("-maxclients")) {                    if (startOptions.length > (i+1)) {                        if (!startOptions[i+1].equals("")) {                            try {                                int maxThreads = new Integer(startOptions[i+1]);                                HTTP_SERVER_MAXTHREADS = maxThreads;                            } catch (Exception e) {                            }                        }                    }                }                // HTTP_SERVER_IDLETIMEOUT                if (startOptions[i].trim().equals("-timeout")) {                    if (startOptions.length > (i+1)) {                        if (!startOptions[i+1].equals("")) {                            try {                                int idleTimeout = new Integer(startOptions[i+1]);                                HTTP_SERVER_IDLETIMEOUT = idleTimeout;                            } catch (Exception e) {                            }                        }                    }                }                // DB_SYSTEM_LOG                if (startOptions[i].trim().equals("-debug")) {                    if (startOptions.length > (i+1)) {                        if (startOptions[i+1].equals("true")) {                            DB_SYSTEM_LOG = true;                        }                    }                }            }            System.out.println(" System boot parameter =[" + strBuf.toString() +"]");            isBuilded = true;        }    }    /**     * トランザクションログの書き込み要非     */    public static volatile boolean TRANSACTION_LOG_WRITE = false;    /**     * トランザクションログのパス     */    public static volatile String TRANSACTION_LOG = "./femtodb.log";    /**     * FemtoServerをhttpで起動する場合のポート番号     */    public static volatile int HTTP_SERVER_PORT = 8080;    /**     * FemtoServerをhttpで起動する場合の最大同時接続可能数     */    public static volatile int HTTP_SERVER_MAXTHREADS = 400;    /**     * FemtoServerをhttpで起動した場合のクライアントの接続後処理待ち時間     */    public static volatile int HTTP_SERVER_IDLETIMEOUT = 30000;    /**     * FemtoDBの内部ログの出力状態 true=出力/false=非出力     */    public static volatile boolean DB_SYSTEM_LOG = false;    }