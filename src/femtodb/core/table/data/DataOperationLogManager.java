package femtodb.core.table.data;import java.util.*;import java.io.*;import com.sun.mail.util.BASE64DecoderStream;import com.sun.mail.util.BASE64EncoderStream;import femtodb.core.*;import femtodb.core.table.*;import femtodb.core.table.transaction.*;import femtodb.core.table.type.*;import femtodb.core.accessor.*;import femtodb.core.accessor.parameter.*;/**  * DataOperationLogManagerクラス<br> * * @author Takahiro Iwase * @license Apache License 2.0  */public class DataOperationLogManager implements Serializable{    private String filePath = null;    private PrintWriter logWriter = null;    private long logNo = 0L;    public DataOperationLogManager(String storeFilePath) {            this.filePath = storeFilePath;    }    public long getLogNo() {        return logNo;    }    public void loadOperationLog(DataAccessor dataAccessor, long lastLogPosition) throws Exception {        try {            File file = new File(this.filePath);            if (file.exists()) {                // ファイルを読み込みデータを復元                this.readLogFile(dataAccessor, lastLogPosition);                logWriter = new PrintWriter(new BufferedWriter(new FileWriter(file, true)));            } else {                logWriter = new PrintWriter(new BufferedWriter(new FileWriter(file)));            }        } catch (Exception e) {            throw e;        }    }    private void readLogFile(DataAccessor dataAccessor, long lastLogPosition) throws Exception {        readLogFile(dataAccessor, lastLogPosition, Long.MAX_VALUE);    }    private void readLogFile(DataAccessor dataAccessor, long lastLogPosition, long endLogPosition) throws Exception {        try {            FileReader fr = new FileReader(this.filePath);            BufferedReader br = new BufferedReader(fr);                        String line;            int lineNo = 0;            while ((line = br.readLine()) != null) {                lineNo++;                if (line.trim().equals("")) continue;                String[] lineSplit = null;                if (line.indexOf("no=") == 0) {                    // Version-0.0.2以降                    String[] lineSplitTmp = line.split(",");                    logNo = Long.parseLong(lineSplitTmp[0].substring(3));                    if (logNo > endLogPosition) break;                    if (logNo <= lastLogPosition) {                        continue;                    }                    lineSplit = new String[lineSplitTmp.length - 1];                    for (int i = 0; i < lineSplit.length; i++) {                        lineSplit[i] = lineSplitTmp[i+1];                    }                } else {                    // Version-0.0.1                    lineSplit = line.split(",");                    logNo++;                }                int logType = Integer.parseInt((String)lineSplit[0]);                                switch(logType) {                    case 1 :                         // createTransaction                        // logTypeのみ                        dataAccessor.createTransaction();                        break;                    case 2 :                                 // commitTransaction                        // logType, TransactionN                        if (lineSplit.length < 2) {                            System.out.println("Data save log is corrupt!! \n Log type=[2] \n FemtoDB boot fail\n Log line no=[" + lineNo + "]");                            System.exit(1);                        }                        dataAccessor.commitTransaction(Long.parseLong(lineSplit[1]));                        break;                    case 211 :                                 // halfCommitTransaction                        // logType, TransactionN                        if (lineSplit.length < 2) {                            System.out.println("Data save log is corrupt!! \n Log type=[211] \n FemtoDB boot fail\n Log line no=[" + lineNo + "]");                            System.exit(1);                        }                        dataAccessor.halfCommitTransaction(Long.parseLong(lineSplit[1]));                        break;                    case 212 :                                 // fixCommitTransaction                        // logType, TransactionN                        if (lineSplit.length < 2) {                            System.out.println("Data save log is corrupt!! \n Log type=[212] \n FemtoDB boot fail\n Log line no=[" + lineNo + "]");                            System.exit(1);                        }                        dataAccessor.fixCommitTransaction(Long.parseLong(lineSplit[1]));                        break;                    case 3 :                                 // rollbackTransaction                        // logType, TransactionNo                        if (lineSplit.length < 2) {                            System.out.println("Data save log is corrupt!! \n Log type=[3] \n FemtoDB boot fail\n Log line no=[" + lineNo + "]");                            System.exit(1);                        }                        dataAccessor.rollbackTransaction(Long.parseLong(lineSplit[1]));                        break;                    case 4 :                                 // endTransaction                        // logType, TransactionNo                        if (lineSplit.length < 2) {                            System.out.println("Data save log is corrupt!! \n Log type=[4] \n FemtoDB boot fail\n Log line no=[" + lineNo + "]");                            System.exit(1);                        }                        dataAccessor.endTransaction(Long.parseLong(lineSplit[1]));                        break;                    case 5 :                         // createTable                        // logType, TableInfo                        if (lineSplit.length < 2) {                            System.out.println("Data save log is corrupt!! \n Log type=[5] \n FemtoDB boot fail\n Log line no=[" + lineNo + "]");                            System.exit(1);                        }                        TableInfo tableInfo = new TableInfo();                        tableInfo.setupStoreString(lineSplit[1]);                        dataAccessor.createTable(tableInfo);                        break;                    case 6 :                         // insertTableData                        // logType, String tableName, TransactionNo, TableDataTransfer, uniqueKey                        if (lineSplit.length < 8) {                            System.out.println("Data save log is corrupt!! \n Log type=[6] \n FemtoDB boot fail\n Log line no=[" + lineNo + "]");                            System.exit(1);                        }                        long transactionNoLong1 = Long.parseLong(lineSplit[1]); // TransactionNo                        String tableName1 = lineSplit[2]; // TableName                        String[] innerDataList = new String[5]; // Data                        String data1Str = null;                        if (!lineSplit[3].equals("#")) {                            data1Str = new String(dataDecoding(lineSplit[3].getBytes()));                        }                        innerDataList[0] = data1Str;                        String data2Str = null;                        if (!lineSplit[4].equals("#")) {                            data2Str = new String(dataDecoding(lineSplit[4].getBytes()));                        }                        innerDataList[1] = data2Str;                        String data3Str = null;                        if (!lineSplit[5].equals("#")) {                            data3Str = new String(dataDecoding(lineSplit[5].getBytes()));                        }                        innerDataList[2] = data3Str;                        String data4Str = null;                        if (!lineSplit[6].equals("#")) {                            data4Str = new String(dataDecoding(lineSplit[6].getBytes()));                        }                        innerDataList[3] = data4Str;                        String data5Str = null;                        if (!lineSplit[7].equals("#")) {                            data5Str = new String(dataDecoding(lineSplit[7].getBytes()));                        }                        innerDataList[4] = data5Str;                        String uniqueKeyStr = null;                        if (lineSplit.length > 8) {                            if (!lineSplit[8].equals("*")) {                                uniqueKeyStr = new String(dataDecoding(lineSplit[8].getBytes()));                            }                        }                        TableDataTransfer tableDataTransfer = new TableDataTransfer();                        tableDataTransfer.putInnerDataStringList(innerDataList);                        dataAccessor.insertTableData(tableName1, transactionNoLong1, tableDataTransfer, uniqueKeyStr);                        break;                    case 7 :                         // updateTableData                        // logType, UpdateParameter, TransactionNo                        if (lineSplit.length < 6) {                            System.out.println("Data save log is corrupt!! \n Log type=[7] \n FemtoDB boot fail\n Log line no=[" + lineNo + "]");                            System.exit(1);                        }                        UpdateParameter updateParameter = new UpdateParameter();                        String tableName2 = lineSplit[1]; // TableName                        String updateColumnString = new String(dataDecoding(lineSplit[2].getBytes()));                        String updateNormalWhereString = new String(dataDecoding(lineSplit[3].getBytes()));                        String updateIndexWhereString = new String(dataDecoding(lineSplit[4].getBytes()));                        long transactionNoLong2 = Long.parseLong(lineSplit[5]); // TransactionNo                                                updateParameter.setTableName(tableName2);                        updateParameter.setUpdateParameterMapString(updateColumnString);                        if (!updateNormalWhereString.trim().equals("")) {                            updateParameter.setNormalWhereParameterListString(updateNormalWhereString);                        }                        if (!updateIndexWhereString.trim().equals("")) {                            updateParameter.setIndexWhereParameterString(updateIndexWhereString);                        }                        dataAccessor.updateTableData(updateParameter, transactionNoLong2);                        break;                    case 8 :                         // deleteTableData                        // logType, DeleteParameter, TransactionNo                        if (lineSplit.length < 5) {                            System.out.println("Data save log is corrupt!! \n Log type=[8] \n FemtoDB boot fail\n Log line no=[" + lineNo + "]");                            System.exit(1);                        }                        DeleteParameter deleteParameter = new DeleteParameter();                        String tableName3 = lineSplit[1]; // TableName                        String deleteNormalWhereString = new String(dataDecoding(lineSplit[2].getBytes()));                        String deleteIndexWhereString = new String(dataDecoding(lineSplit[3].getBytes()));                        long transactionNoLong3 = Long.parseLong(lineSplit[4]); // TransactionNo                                                deleteParameter.setTableName(tableName3);                        if (!deleteNormalWhereString.trim().equals("")) {                            deleteParameter.setNormalWhereParameterListString(deleteNormalWhereString);                        }                        if (!deleteIndexWhereString.trim().equals("")) {                            deleteParameter.setIndexWhereParameterString(deleteIndexWhereString);                        }                        dataAccessor.deleteTableData(deleteParameter, transactionNoLong3);                        break;                    case 90 :                         // addOIndexColumn                        // logType, TableInfo                        if (lineSplit.length < 2) {                            System.out.println("Data save log is corrupt!! \n Log type=[90] \n FemtoDB boot fail\n Log line no=[" + lineNo + "]");                            System.exit(1);                        }                        TableInfo addIndexTableInfo = new TableInfo();                        addIndexTableInfo.setupStoreString(lineSplit[1]);                        dataAccessor.addIndexColumn(addIndexTableInfo);                        break;                    case 99 :                         // removeTable                        // logType, TableName(String)                        if (lineSplit.length < 2) {                            System.out.println("Data save log is corrupt!! \n Log type=[99] \n FemtoDB boot fail\n Log line no=[" + lineNo + "]");                            System.exit(1);                        }                        dataAccessor.removeTable(lineSplit[1]);                        break;                }            }        } catch (Exception e) {            throw e;        }    }    public boolean operationLogWrite(Object... logObjects) {        Integer logTypeInteger = (Integer)logObjects[0];        int logType = logTypeInteger.intValue();        logNo++;        logWriter.print("no=");        logWriter.print(logNo);        logWriter.print(",");        switch(logType) {            case 1 :                 // createTransaction                // logTypeのみ                logWriter.println(logType);                logWriter.flush();                break;            case 2 :                 // commitTransaction                // logType, TransactionNo                TransactionNo tn1 = (TransactionNo)logObjects[1];                logWriter.print(logType);                logWriter.print(",");                logWriter.println(tn1.getTransactionNo());                logWriter.flush();                break;            case 211 :                 // halfCommitTransaction                // logType, TransactionNo                TransactionNo hTn1 = (TransactionNo)logObjects[1];                logWriter.print(logType);                logWriter.print(",");                logWriter.println(hTn1.getTransactionNo());                logWriter.flush();                break;            case 212 :                 // fixCommitTransaction                // logType, TransactionNo                TransactionNo fTn1 = (TransactionNo)logObjects[1];                logWriter.print(logType);                logWriter.print(",");                logWriter.println(fTn1.getTransactionNo());                logWriter.flush();                break;            case 3 :                 // rollbackTransaction                // logType, TransactionNo                TransactionNo tn2 = (TransactionNo)logObjects[1];                logWriter.print(logType);                logWriter.print(",");                logWriter.println(tn2.getTransactionNo());                logWriter.flush();                break;            case 4 :                 // endTransaction                // logType, TransactionNo                TransactionNo tn3 = (TransactionNo)logObjects[1];                logWriter.print(logType);                logWriter.print(",");                logWriter.println(tn3.getTransactionNo());                logWriter.flush();                break;            case 5 :                 // createTable                // logType, TableInfo                TableInfo tableInfo = (TableInfo)logObjects[1];                logWriter.print(logType);                logWriter.print(",");                logWriter.println(tableInfo.createStoreString());                logWriter.flush();                break;            case 6 :                 // insertTableData                // logType, String tableName, TransactionNo, TableDataTransfer                String tableName1 = (String)logObjects[1];                TransactionNo tn4 = (TransactionNo)logObjects[2];                TableDataTransfer tdt1 = (TableDataTransfer)logObjects[3];                String uniqueKey = (String)logObjects[4];                logWriter.print(logType);                logWriter.print(",");                logWriter.print(tn4.getTransactionNo());                logWriter.print(",");                logWriter.print(tableName1);                logWriter.print(",");                String[] dataList = tdt1.getInnerDataStringList();                String sep = "";                for (int i = 0; i < dataList.length; i++) {                    String data = dataList[i];                    if (data == null) {                        data = "#";                    } else {                        data = new String(dataEncoding(data.getBytes()));                    }                    if (i == 0) {                        logWriter.print(data);                    } else {                        logWriter.print(",");                        logWriter.print(data);                    }                }                // ユニークキー                if (uniqueKey == null || uniqueKey.equals("")) {                    uniqueKey = "*";                } else {                    uniqueKey = new String(dataEncoding(uniqueKey.getBytes()));                }                logWriter.print(",");                logWriter.print(uniqueKey);                logWriter.println("");                // 6,1234(TranNo),data1(base64enc),#(データなし),data3(base64enc),data4(base64enc),data5(base64enc),uniqueKey(base64enc)                logWriter.flush();                break;            case 7 :                 // updateTableData                // logType, UpdateParameter, TransactionNo                UpdateParameter updateParameter = (UpdateParameter)logObjects[1];                TransactionNo tn5 = (TransactionNo)logObjects[2];                logWriter.print(logType);                logWriter.print(",");                String tableName2 = updateParameter.getTableString(); // Updateのテーブル名                if (tableName2 != null && !tableName2.equals("")) {                    logWriter.print(tableName2);                } else {                    logWriter.print(" ");                }                logWriter.print(",");                String upParameter = updateParameter.getUpdateParameterMapString(); // Updateの更新パラメータの情報                if (upParameter != null && !upParameter.equals("")) {                    logWriter.print(new String(dataEncoding(upParameter.getBytes()))); // Update対象の カラム名\t更新値\nカラム名\t更新値 <=これをBASE64でエンコードした値                } else {                    logWriter.print(" ");                }                logWriter.print(",");                String whParameter = updateParameter.getNormalWhereParameterListString(); // Updateのwhere句のインデックスなしWhereの条件                if (whParameter != null && !whParameter.equals("")) {                    logWriter.print(new String(dataEncoding(whParameter.getBytes()))); // Update対象のWhere句のIndex無し カラム名\t条件指定番号\tパラメータークラス名=パラメーター値\nカラム名\t条件指定番号\tパラメータークラス名=パラメーター値 <=これをBASE64でエンコードした値                } else {                    logWriter.print(" ");                }                logWriter.print(",");                String whIdxParameter = updateParameter.getIndexWhereParameterString(); // Updateのwhere句のインデックス条件                if (whIdxParameter != null && !whIdxParameter.equals("")) {                    logWriter.print(new String(dataEncoding(whIdxParameter.getBytes()))); // Update対象のWhere句のIndex カラム名\t条件指定番号\tパラメータークラス名=パラメーター値\n <=これをBASE64でエンコードした                } else {                    logWriter.print(" ");                }                                logWriter.print(",");                logWriter.println(tn5.getTransactionNo());                // 7,,1234(TranNo)                logWriter.flush();                break;            case 8 :                 // deleteTableData                // logType, DeleteParameter, TransactionNo                DeleteParameter deleteParameter = (DeleteParameter)logObjects[1];                TransactionNo tn6 = (TransactionNo)logObjects[2];                logWriter.print(logType);                logWriter.print(",");                String tableName3 = deleteParameter.getTableString(); // Updateのテーブル名                if (tableName3 != null && !tableName3.equals("")) {                    logWriter.print(tableName3);                } else {                    logWriter.print(" ");                }                logWriter.print(",");                String whParameter2 = deleteParameter.getNormalWhereParameterListString(); // Deleteのwhere句のインデックスなしWhereの条件                if (whParameter2 != null && !whParameter2.equals("")) {                    logWriter.print(new String(dataEncoding(whParameter2.getBytes()))); // Delete対象のWhere句のIndex無し カラム名\t条件指定番号\tパラメータークラス名=パラメーター値\nカラム名\t条件指定番号\tパラメータークラス名=パラメーター値 <=これをBASE64でエンコードした値                } else {                    logWriter.print(" ");                }                logWriter.print(",");                String whIdxParameter2 = deleteParameter.getIndexWhereParameterString(); // Deleteのwhere句のインデックス条件                if (whIdxParameter2 != null && !whIdxParameter2.equals("")) {                    logWriter.print(new String(dataEncoding(whIdxParameter2.getBytes()))); // Delete対象のWhere句のIndex カラム名\t条件指定番号\tパラメータークラス名=パラメーター値\n <=これをBASE64でエンコードした                } else {                    logWriter.print(" ");                }                                logWriter.print(",");                logWriter.println(tn6.getTransactionNo());                logWriter.flush();                break;            case 90 :                 // addIndexColumn                // logType, TableInfo                TableInfo addIndexTableInfo = (TableInfo)logObjects[1];                logWriter.print(logType);                logWriter.print(",");                logWriter.println(addIndexTableInfo.createStoreString());                logWriter.flush();                break;            case 99 :                 // removeTable                // logType, TableName(String)                String tableName = (String)logObjects[1];                logWriter.print(logType);                logWriter.print(",");                logWriter.println(tableName);                logWriter.flush();                break;            default :                 System.out.println("Illigal log type=" + logType);                break;        }        return true;    }    // Base64でエンコード    protected byte[] dataEncoding(byte[] datas) {        return BASE64EncoderStream.encode(datas);    }    // Base64でデコード    protected byte[] dataDecoding(byte[] datas) {        return BASE64DecoderStream.decode(datas);    }}    