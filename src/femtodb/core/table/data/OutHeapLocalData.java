package femtodb.core.table.data;import java.io.*;import java.nio.*;import java.util.*;/**  * OutHeapLocalDataクラス<br> * * @author Takahiro Iwase * @license Apache License 2.0  */public class OutHeapLocalData {    int maxCapacity = 0;    int nowDataLen = 0;     int userSetCapacity = 0;    ByteBuffer buf = null;    private static byte recodeSplit = ((byte[])"\n".getBytes())[0];    private static byte keyValueSplit = ((byte[])"\t".getBytes())[0];    public OutHeapLocalData() {        this(1024);    }    public OutHeapLocalData(int capacity) {        this.maxCapacity = capacity;        this.buf = ByteBuffer.allocate(capacity);        this.userSetCapacity = capacity;    }    public final void put(String key, String value) {        byte[] keyBytes = key.getBytes();        byte[] valBytes = value.getBytes();        int keyLen = keyBytes.length;        int valLen = valBytes.length;        if (nowDataLen == 0) {            this.nowDataLen = nowDataLen + keyLen + 1 + valLen + 1;            if (nowDataLen > this.maxCapacity) {                buf.clear();                buf = null;                buf = ByteBuffer.allocate(nowDataLen + this.userSetCapacity);            }            buf.put(keyBytes);            buf.put(keyValueSplit);            buf.put(valBytes);            buf.put(recodeSplit);        } else {            buf.position(0);            byte[] newData = replaceNewData(key, value, keyBytes, valBytes);            if (newData.length > this.maxCapacity) {                buf.clear();                buf = null;                buf = ByteBuffer.allocate(newData.length + this.userSetCapacity);                this.maxCapacity = newData.length + this.userSetCapacity;            }            buf.clear();            buf.put(newData);            this.nowDataLen = newData.length;        }    }    private byte[] replaceNewData(String key, String value, byte[] keyBytes, byte[] valBytes) {        byte[] nowData = new byte[this.nowDataLen];        int newDataLen = keyBytes.length + 1 + valBytes.length + 1;        byte[] newData = new byte[this.nowDataLen + newDataLen];                buf.get(nowData);        System.arraycopy(nowData, 0, newData, newDataLen, nowData.length);        System.arraycopy(keyBytes, 0, newData, 0, keyBytes.length); // Key        System.arraycopy("\t".getBytes(), 0, newData, keyBytes.length, 1); // \t        System.arraycopy(valBytes, 0, newData, keyBytes.length+1, valBytes.length); // Value        System.arraycopy("\n".getBytes(), 0, newData, keyBytes.length+1+valBytes.length, 1); // \n        return newData;    }        public final String get(String key) {        byte[] dataBytes = new byte[this.nowDataLen];        buf.limit(this.nowDataLen);        buf.position(0);        buf.get(dataBytes);        String dataStr = new String(dataBytes);        return dataStr;    }    public final String remove(String key) {        return null;    }    public final void clear() {    }}