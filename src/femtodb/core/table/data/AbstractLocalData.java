package femtodb.core.table.data;import java.io.*;abstract class AbstractLocalData implements Serializable {    protected static String getColumnNameGroup(String keyFirstChar, SerializeLocalData localData) {        int idx = createHash(keyFirstChar);        //if (idx == null) return null;/*        if (colDataList[idx] == null) return null;        return new String((byte[])colDataList[idx]);*/                                switch (idx) {            case 0 :                 if (localData.data1 == null) return null;                return new String(localData.data1);            case 1 :                 if (localData.data2 == null) return null;                return new String(localData.data2);            case 2 :                 if (localData.data3 == null) return null;                return new String(localData.data3);            case 3 :                 if (localData.data4 == null) return null;                return new String(localData.data4);            case 4 :                 if (localData.data5 == null) return null;                return new String(localData.data5);        }        return null;    }    protected static void putColumnNameGroup(String keyFirstChar, String groupStr, SerializeLocalData localData) {        int idx = createHash(keyFirstChar);        //if (idx == null) return;//        colDataList[idx] = groupStr.getBytes();                switch (idx) {            case 0 :                 localData.data1 = groupStr.getBytes();                break;            case 1 :                 localData.data2 = groupStr.getBytes();                break;            case 2 :                 localData.data3 = groupStr.getBytes();                break;            case 3 :                 localData.data4 = groupStr.getBytes();                break;            case 4 :                 localData.data5 = groupStr.getBytes();                break;        }    }     protected static int createHash(String keyFirstChar) {        return ((keyFirstChar.hashCode() << 1) >>> 1) % 5;    }}