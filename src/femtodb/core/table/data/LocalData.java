package femtodb.core.table.data;import java.util.*;public class LocalData  {//    private static Map<String, Integer> charMap = new HashMap<String, Integer>();    //Object[] colDataList = new Object[5];    byte[] data1 = null;    byte[] data2 = null;    byte[] data3 = null;    byte[] data4 = null;    byte[] data5 = null;/*    static {        charMap.put("a", 0);        charMap.put("b", 1);        charMap.put("c", 2);        charMap.put("d", 3);        charMap.put("e", 4);        charMap.put("f", 5);        charMap.put("g", 6);        charMap.put("h", 7);        charMap.put("i", 8);        charMap.put("j", 9);        charMap.put("k", 10);        charMap.put("l", 11);        charMap.put("m", 12);        charMap.put("n", 13);        charMap.put("o", 14);        charMap.put("p", 15);        charMap.put("q", 16);        charMap.put("r", 17);        charMap.put("s", 18);        charMap.put("t", 19);        charMap.put("u", 20);        charMap.put("v", 21);        charMap.put("w", 22);        charMap.put("x", 23);        charMap.put("y", 24);        charMap.put("z", 25);        charMap.put("0", 26);        charMap.put("1", 27);        charMap.put("2", 28);        charMap.put("3", 29);        charMap.put("4", 30);        charMap.put("5", 31);        charMap.put("6", 32);        charMap.put("7", 33);        charMap.put("8", 34);        charMap.put("9", 35);    }*/    public LocalData() {    }        Object[] getInnerData() {        Object[] ret = new Object[5];        ret[0] = data1;        ret[1] = data2;        ret[2] = data3;        ret[3] = data4;        ret[4] = data5;        return ret;    }    void putInnerData(Object[] dataList) {        data1 = (byte[])dataList[0];        data2 = (byte[])dataList[1];        data3 = (byte[])dataList[2];        data4 = (byte[])dataList[3];        data5 = (byte[])dataList[4];    }    public void put(String key, String value) {        String keyFirstChar = key.substring(0, 1);        String groupStr = getColumnNameGroup(keyFirstChar, this);        if (groupStr == null) {            groupStr = key + "\t" + value;        } else {            String chkKey = key+"\t";            String[] groupStrList = groupStr.split("\n");            StringBuilder strBuf = new StringBuilder(100);            String sep ="";            boolean update = false;            for (int i = 0; i < groupStrList.length; i++) {                if (groupStrList[i].indexOf(chkKey) == 0) {                    groupStrList[i] = chkKey + value;                    update = true;                }                strBuf.append(sep);                strBuf.append(groupStrList[i]);                sep = "\n";            }            if (update == false) strBuf.append("\n").append(chkKey+value);            groupStr = strBuf.toString();        }                putColumnNameGroup(keyFirstChar, groupStr, this);    }    public String get(String key) {        String ret = null;        String keyFirstChar = key.substring(0, 1);        String groupStr = getColumnNameGroup(keyFirstChar, this);                if (groupStr == null) return null;                String chkKey = key+"\t";        if (groupStr.indexOf("\n") == -1) {            if (groupStr.indexOf(chkKey) == 0) {                return groupStr.substring(chkKey.length());            }        }        String[] groupStrList = groupStr.split("\n");        for (int i = 0; i < groupStrList.length; i++) {            if (groupStrList[i].indexOf(chkKey) == 0) {                ret = groupStrList[i].substring(chkKey.length());                return ret;            }        }        return ret;    }    private static String getColumnNameGroup(String keyFirstChar, LocalData localData) {        int idx = createHash(keyFirstChar);        //if (idx == null) return null;/*        if (colDataList[idx] == null) return null;        return new String((byte[])colDataList[idx]);*/                                switch (idx) {            case 0 :                 if (localData.data1 == null) return null;                return new String(localData.data1);            case 1 :                 if (localData.data2 == null) return null;                return new String(localData.data2);            case 2 :                 if (localData.data3 == null) return null;                return new String(localData.data3);            case 3 :                 if (localData.data4 == null) return null;                return new String(localData.data4);            case 4 :                 if (localData.data5 == null) return null;                return new String(localData.data5);        }        return null;    }    private static void putColumnNameGroup(String keyFirstChar, String groupStr, LocalData localData) {        int idx = createHash(keyFirstChar);        //if (idx == null) return;//        colDataList[idx] = groupStr.getBytes();                switch (idx) {            case 0 :                 localData.data1 = groupStr.getBytes();                break;            case 1 :                 localData.data2 = groupStr.getBytes();                break;            case 2 :                 localData.data3 = groupStr.getBytes();                break;            case 3 :                 localData.data4 = groupStr.getBytes();                break;            case 4 :                 localData.data5 = groupStr.getBytes();                break;        }    }     private static int createHash(String keyFirstChar) {        return ((keyFirstChar.hashCode() << 1) >>> 1) % 5;    }}