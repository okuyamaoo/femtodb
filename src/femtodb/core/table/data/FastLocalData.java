package femtodb.core.table.data;import java.util.*;import java.util.concurrent.*;import java.util.concurrent.atomic.*;public class FastLocalData implements LocalData {    private Map<String, String> charMap = new TreeMap<String, String>();    public FastLocalData() {            }        public Object[] getInnerData() {        StringBuilder strBuf = new StringBuilder();        String sep = "";        for (Iterator ite = charMap.entrySet().iterator(); ite.hasNext();) {            Map.Entry<String, String> entry = (Map.Entry)ite.next();            String key = entry.getKey();            String value = entry.getValue();            strBuf.append(sep);            strBuf.append(key);            strBuf.append("\t");            strBuf.append(value);            sep = "\n";        }        Object[] ret = new Object[5];                ret[0] = strBuf.toString().getBytes();        ret[1] = null;        ret[2] = null;        ret[3] = null;        ret[4] = null;        return ret;    }   public void putInnerData(Object[] dataList) {        charMap = new TreeMap<String, String>();        if (dataList[0] != null) {            String[] dataLine = new String((byte[])dataList[0]).split("\n");                        for (int idx = 0; idx < dataLine.length; idx++) {                String[] keyValue = dataLine[idx].split("\t");                charMap.put(keyValue[0], keyValue[1]);            }        }    }    public String[] getInnerDataStringList() {            String[] ret = new String[5];        StringBuilder strBuf = new StringBuilder();        String sep = "";        for (Iterator ite = charMap.entrySet().iterator(); ite.hasNext();) {            Map.Entry<String, String> entry = (Map.Entry)ite.next();            String key = entry.getKey();            String value = entry.getValue();            strBuf.append(sep);            strBuf.append(key);            strBuf.append("\t");            strBuf.append(value);            sep = "\n";        }        ret[0] = strBuf.toString();        return ret;    }        public void putInnerDataStringList(String[] stringList) {        charMap = new TreeMap<String, String>();        if (stringList[0] != null) {            String[] dataLine = stringList[0].split("\n");                        for (int idx = 0; idx < dataLine.length; idx++) {                String[] keyValue = dataLine[idx].split("\t");                charMap.put(keyValue[0], keyValue[1]);            }        }    }    public final void put(String key, String value) {        charMap.put(key, value);    }    public final String get(String key) {        return charMap.get(key);    }    public Map<String, String> getAllData() {        return charMap;    }}