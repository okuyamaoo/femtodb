package femtodb.core.table.data;import java.util.*;import java.util.concurrent.*;import java.util.concurrent.atomic.*;/**  * FastLocalDataクラス<br> * * @author Takahiro Iwase * @license Apache License 2.0  */public class FastLocalData extends AbstractLocalData implements LocalData {    private Map<String, byte[]> charMap = new TreeMap();    public FastLocalData() {    }    private String convertString(byte[] data) {        if (data == null) return null;        return new String(data);    }    private byte[] convertBytes(String data) {        if (data == null) return null;        return data.getBytes();    }    public Object[] getInnerData() {        SerializeLocalData serializeLocalData = new SerializeLocalData();        for (Iterator ite = charMap.entrySet().iterator(); ite.hasNext();) {            Map.Entry<String, byte[]> entry = (Map.Entry)ite.next();            String key = entry.getKey();            String value = convertString(entry.getValue());            serializeLocalData.put(key, value);        }        Object[] ret =serializeLocalData.getInnerData();        serializeLocalData = null;        return ret;    }   public void putInnerData(Object[] dataList) {        SerializeLocalData serializeLocalData = new SerializeLocalData();        serializeLocalData.putInnerData(dataList);        putAllData(serializeLocalData.getAllData());        serializeLocalData =null;    }    public String[] getInnerDataStringList() {        SerializeLocalData serializeLocalData = new SerializeLocalData();        for (Iterator ite = charMap.entrySet().iterator(); ite.hasNext();) {            Map.Entry<String, byte[]> entry = (Map.Entry)ite.next();            String key = entry.getKey();            String value = convertString(entry.getValue());            serializeLocalData.put(key, value);        }        String[] ret = serializeLocalData.getInnerDataStringList();        serializeLocalData = null;        return ret;    }        public void putInnerDataStringList(String[] stringList) {        SerializeLocalData serializeLocalData = new SerializeLocalData();        serializeLocalData.putInnerDataStringList(stringList);        putAllData(serializeLocalData.getAllData());        serializeLocalData =null;    }    public final void put(String key, String value) {        charMap.put(key, convertBytes(value));    }    public final String get(String key) {        return convertString(charMap.get(key));    }    public final byte[] getBytes(String key) {        return charMap.get(key);    }    public Map<String, String> getAllData() {        Map<String, String> retMap = new TreeMap();        for (Iterator ite = charMap.entrySet().iterator(); ite.hasNext();) {            Map.Entry<String, byte[]> entry = (Map.Entry)ite.next();            String key = entry.getKey();            String value = convertString(entry.getValue());            retMap.put(key, value);        }                return retMap;    }    public void putAllData(Map<String, String> data) {        charMap = new TreeMap();        for (Iterator ite = data.entrySet().iterator(); ite.hasNext();) {            Map.Entry<String, String> entry = (Map.Entry)ite.next();            charMap.put(entry.getKey(), convertBytes(entry.getValue()));        }    }}/*public class FastLocalData extends AbstractLocalData implements LocalData {    private Map<String, String> charMap = new TreeMap();    public FastLocalData() {    }    private String convertString(byte[] data) {        if (data == null) return null;        return new String(data);    }    private byte[] convertBytes(String data) {        if (data == null) return null;        return data.getBytes();    }    public Object[] getInnerData() {        SerializeLocalData serializeLocalData = new SerializeLocalData();        for (Iterator ite = charMap.entrySet().iterator(); ite.hasNext();) {            Map.Entry<String, String> entry = (Map.Entry)ite.next();            String key = entry.getKey();            String value = entry.getValue();            serializeLocalData.put(key, value);        }        Object[] ret =serializeLocalData.getInnerData();        serializeLocalData = null;        return ret;    }   public void putInnerData(Object[] dataList) {        SerializeLocalData serializeLocalData = new SerializeLocalData();        serializeLocalData.putInnerData(dataList);        charMap =serializeLocalData.getAllData();        serializeLocalData =null;    }    public String[] getInnerDataStringList() {        SerializeLocalData serializeLocalData = new SerializeLocalData();        for (Iterator ite = charMap.entrySet().iterator(); ite.hasNext();) {            Map.Entry<String, String> entry = (Map.Entry)ite.next();            String key = entry.getKey();            String value = entry.getValue();            serializeLocalData.put(key, value);        }        String[] ret = serializeLocalData.getInnerDataStringList();        serializeLocalData = null;        return ret;    }        public void putInnerDataStringList(String[] stringList) {        SerializeLocalData serializeLocalData = new SerializeLocalData();        serializeLocalData.putInnerDataStringList(stringList);        charMap = serializeLocalData.getAllData();        serializeLocalData =null;    }    public final void put(String key, String value) {        charMap.put(key, value);    }    public final String get(String key) {        return charMap.get(key);    }    public final byte[] getBytes(String key) {        return null; //charMap.get(key);    }    public Map<String, String> getAllData() {        Map<String, String> retMap = new TreeMap();        for (Iterator ite = charMap.entrySet().iterator(); ite.hasNext();) {            Map.Entry<String, String> entry = (Map.Entry)ite.next();            String key = entry.getKey();            String value = entry.getValue();            retMap.put(key, value);        }                return retMap;    }}*/