package femtodb.core.table.transaction;import java.io.*;import java.util.*;import java.util.concurrent.*;import java.util.concurrent.atomic.AtomicLong;/**  * TransactionNoManagerクラス<br> * * @author Takahiro Iwase * @license Apache License 2.0  */public class TransactionNoManager implements Serializable {    private AtomicLong no = null;    private Map<Long, TransactionNo> transactionStatusMap = null;    private TransactionNoManager() {}    public static TransactionNoManager getNewInstance() {        return new TransactionNoManager();    }    public void initTransactionNoManager() {        no = new AtomicLong(1);        transactionStatusMap = new ConcurrentHashMap(1024);        TransactionNo anonymousTn = new TransactionNo(Long.MAX_VALUE);        anonymousTn.commit();        transactionStatusMap.put(Long.MAX_VALUE, anonymousTn);    }    public void initTransactionNoManager(long transactionNo) {        no = new AtomicLong(transactionNo);        transactionStatusMap = new ConcurrentHashMap(1024);        TransactionNo anonymousTn = new TransactionNo(Long.MAX_VALUE);        transactionStatusMap.put(Long.MAX_VALUE, anonymousTn);    }    public void initTransactionNoManager(AtomicLong transactionNo, Map<Long, TransactionNo> setTransactionStatusMap) {        no = transactionNo;        transactionStatusMap = setTransactionStatusMap;    }    public TransactionNo getTransactionNoObejct(long transactionNoKey) {        return transactionStatusMap.get(transactionNoKey);    }    public boolean existsTransactionNoObejct(long transactionNoKey) {        return transactionStatusMap.containsKey(transactionNoKey);    }    public TransactionNo createTransactionNo() {        long ret = no.incrementAndGet();        TransactionNo tn = new TransactionNo(ret);        transactionStatusMap.put(ret, tn);        return tn;    }    public TransactionNo createAnonymousTransactionNo() {            return transactionStatusMap.get(new Long(Long.MAX_VALUE));    }    public boolean commitTransaction(TransactionNo no) {        no.commit();        return true;    }    public boolean halfCommitTransaction(TransactionNo no) {        return no.halfCommit();    }    public boolean fixCommitTransaction(TransactionNo no) {        return no.fixCommit();    }    public boolean rollbackTransaction(TransactionNo no) {        no.rollback();        return true;    }    public boolean endTransaction(TransactionNo no) {        if (no != null) {            transactionStatusMap.remove(no.getTransactionNo());            return true;        }        return false;    }    public List<TransactionNo> getTransactionNoList() {        List<TransactionNo> noList = new ArrayList();        for (Iterator ite = transactionStatusMap.entrySet().iterator(); ite.hasNext();) {            Map.Entry entry = (Map.Entry)ite.next();            noList.add((TransactionNo)entry.getValue());        }        return noList;    }    public AtomicLong getNoObject() {        return no;    }    public Map<Long, TransactionNo> getStatusMapObject() {        return transactionStatusMap;    }}