package femtodb.core.table.transaction;import java.util.*;import java.util.concurrent.*;import java.util.concurrent.atomic.AtomicLong;public class TransactionNoManager {    private static AtomicLong no = null;    private static Map<Long, TransactionNo> transactionStatusMap = null;    public static void initTransactionNoManager() {        no = new AtomicLong(1);        transactionStatusMap = new ConcurrentHashMap(1024);    }    public static void initTransactionNoManager(long transactionNo) {        no = new AtomicLong(transactionNo);        transactionStatusMap = new ConcurrentHashMap(1024);    }    public static TransactionNo getTransactionNoObejct(long transactionNoKey) {        return transactionStatusMap.get(transactionNoKey);    }    public static boolean existsTransactionNoObejct(long transactionNoKey) {        return transactionStatusMap.containsKey(transactionNoKey);    }    public static TransactionNo createTransactionNo() {        long ret = no.incrementAndGet();        TransactionNo tn = new TransactionNo(ret);        transactionStatusMap.put(ret, tn);        return tn;    }    public static boolean commitTransaction(TransactionNo no) {        no.commit();        return true;    }    public static boolean rollbackTransaction(TransactionNo no) {        no.rollback();        return true;    }    public static boolean endTransaction(TransactionNo no) {        transactionStatusMap.remove(no.getTransactionNo());        return true;    }}