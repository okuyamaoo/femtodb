package femtodb.core.accessor;import java.util.*;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.atomic.AtomicLong;import femtodb.core.*;import femtodb.core.table.*;import femtodb.core.table.data.*;import femtodb.core.table.transaction.*;import femtodb.core.accessor.parameter.*;/**  * QueryOptimizerクラス<br> * * @author Takahiro Iwase * @license Apache License 2.0  */public class QueryOptimizer {    public static Map<String, Long> lastRebuildIndexInfo = new ConcurrentHashMap();    public static Map<String, Long> lastUpdateAccessTimeInfo = new ConcurrentHashMap();        // インスタンス化不可    private QueryOptimizer() {    }    public static boolean checkModifyedTable(String tableName, long startTime) {        Long lastUpdateTime = (Long)lastUpdateAccessTimeInfo.get(tableName);        Long lastRebuildTime = (Long)lastRebuildIndexInfo.get(tableName);        if (lastUpdateTime == null && lastRebuildTime != null && lastRebuildTime.longValue() <  startTime) return true;        if (lastUpdateTime != null && lastRebuildTime == null) return false;        if (lastUpdateTime.longValue() < lastRebuildTime.longValue() && lastRebuildTime.longValue() <  startTime) return true;        return false;    }    // TODO:ここでパラメータとその他情報を使ってIndex等の処理をする    // Select特有の処理をいれる    public static TableIterator execute(TransactionNo tn, TableManager tableManager, String tableName, SelectParameter selectParameter, ITable table) {        return table.getTableDataIterator(tn, selectParameter);    }    // TODO:ここでパラメータとその他情報を使ってIndex等の処理をする    // Update特有の処理をいれる    public static TableIterator execute(TransactionNo tn, TableManager tableManager, String tableName, UpdateParameter updateParameter, ITable table) {        lastUpdateAccessTimeInfo.put(tableName, System.nanoTime());        SelectParameter selectParameter = new SelectParameter();        selectParameter.setNormalWhereParameterListObject(updateParameter.getNormalWhereParameterListObject());        selectParameter.setIndexWhereParameterObject(updateParameter.getIndexWhereParameterObject());        return table.getTableDataIterator(tn, selectParameter);    }    // TODO:ここでパラメータとその他情報を使ってIndex等の処理をする    // Delete特有の処理をいれる    public static TableIterator execute(TransactionNo tn, TableManager tableManager, String tableName, DeleteParameter deleteParameter, ITable table) {        lastUpdateAccessTimeInfo.put(tableName, System.currentTimeMillis());        SelectParameter selectParameter = new SelectParameter();        selectParameter.setNormalWhereParameterListObject(deleteParameter.getNormalWhereParameterListObject());        selectParameter.setIndexWhereParameterObject(deleteParameter.getIndexWhereParameterObject());        return table.getTableDataIterator(tn, selectParameter);    }    /**     * クエリーを条件指定の有無等で並列実行制御を行う     *     */    public final static Object getParallelsSyncObject(SelectParameter selectParameter, Thread executeThread) {        Object syncObj = null;        if (selectParameter.existIndexWhereParameter()) {            long req = FemtoDBConstants.indexRequestCount.incrementAndGet();            int syncPoint = new Long(req % FemtoDBConstants.indexParallelsNumber).intValue();            executeThread.setPriority(8);            syncObj = FemtoDBConstants.indexParallelsSync[syncPoint];        } else if (selectParameter.existNormalWhereParameter()) {            long req = FemtoDBConstants.parameterRequestCount.incrementAndGet();            int syncPoint = new Long(req % FemtoDBConstants.parameterParallelsNumber).intValue();            executeThread.setPriority(3);            syncObj = FemtoDBConstants.parameterParallelsSync[syncPoint];        } else {            long req = FemtoDBConstants.allSearchRequestCount.incrementAndGet();            int syncPoint = new Long(req % FemtoDBConstants.allSearchParallelsNumber).intValue();            if (selectParameter.existSortParameter()) executeThread.setPriority(10);            syncObj = FemtoDBConstants.allSearchParallelsSync[syncPoint];        }        return syncObj;    }}