package femtodb.core.accessor.parameter;import java.util.regex.Pattern;import java.util.regex.Matcher;import java.util.*;import femtodb.core.*;import femtodb.core.table.*;import femtodb.core.table.data.*;import femtodb.core.table.transaction.*;import femtodb.core.accessor.parameter.*;import femtodb.core.accessor.executor.*;import femtodb.core.accessor.scripts.*;public class WhereTypeLike implements IWhereType {    private String whereParamStr = null;    private String columnName = null;    private Pattern pattern = null;    public WhereTypeLike(String columnName, IWhereParameter whereParameter) {        this.columnName = columnName;        whereParamStr = whereParameter.toString();        pattern = Pattern.compile(whereParamStr);    }    public int type() {        return 2;    }    public final boolean execute(TableDataTransfer tableDataTransfer) {        String columnData = tableDataTransfer.getColumnData(this.columnName);        if (columnData == null) return false;        Matcher matcher = pattern.matcher(columnData);        if (matcher.find()) {            return true;        } else {            return false;        }    }    public final void executeAll(TableIterator iterator, TransactionNo transactionNo, List resultList) {        for (; iterator.hasNext();) {            iterator.nextEntry();            TableData tableData = (TableData)iterator.getEntryValue();            TableDataTransfer tableDataTransfer = tableData.getTableDataTransfer(transactionNo);            if (tableDataTransfer != null) {                String columnData = tableDataTransfer.getColumnData(this.columnName);                if (columnData == null) continue;                Matcher matcher = pattern.matcher(columnData);                if (matcher.find()) {                    resultList.add(tableDataTransfer);                }            }        }    }}