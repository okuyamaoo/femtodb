package femtodb.core.accessor.scripts;import java.io.*;import java.util.*;import femtodb.core.table.data.*;import femtodb.core.accessor.parameter.*;public class DataSortComparator implements Comparator, Serializable{    private String[] sortColumns = null;    private int[] sortTypes = null;    private boolean[] sortNumbers = null;    public DataSortComparator(List<SortParameter> sortParameterList) {        this.sortColumns = new String[sortParameterList.size()];        this.sortTypes = new int[this.sortColumns.length];        this.sortNumbers = new boolean[this.sortColumns.length];        for (int idx = 0; idx < this.sortColumns.length; idx++) {            SortParameter sortParameter = sortParameterList.get(idx);            this.sortColumns[idx] = sortParameter.columnName;            this.sortTypes[idx] = sortParameter.type;            this.sortNumbers[idx] = sortParameter.numberSort;        }    }    /**     * ソート処理用に並び替える     */    public int compare(Object o1, Object o2){        TableDataTransfer data1 = (TableDataTransfer)o1;        TableDataTransfer data2 = (TableDataTransfer)o2;        String data1Str = null;        String data2Str = null;        double num1 = 0;        double num2 = 0;        int sRet = 0;        boolean allNull = true;        for (int idx = 0; idx < this.sortColumns.length; idx++) {            data1Str = data1.getColumnData(this.sortColumns[idx]);            data2Str = data2.getColumnData(this.sortColumns[idx]);            if (data1Str == null && data2Str == null) {                continue;            }            allNull = false;            if (data1Str != null && data2Str == null) {                return -1;            }            if (data1Str == null && data2Str != null) {                return 1;            }            // nullチェック            if (data1Str == null || (sortNumbers[idx] == true && data1Str.trim().equals(""))) {                if(sortTypes[idx] == 1){                    // ASC                    return 1;                }else{                    // DESC                    return -1;                }            }            if (data2Str == null || (sortNumbers[idx] == true && data2Str.trim().equals(""))) {                if(sortTypes[idx] == 1){                    // ASC                    return -1;                }else{                    // DESC                    return 1;                }            }            // 同値検証            if (data1Str.equals(data2Str)) continue;            if (sortNumbers[idx] == false) { // 文字型ソート                if((sRet = data1Str.compareTo(data2Str)) != 0){                    if(sortTypes[idx] == 1) {                        // ASC                        return sRet;                    }else{                        // DESC                        if (sRet > 0) {                            return -1;                        } else if (sRet < 0) {                            return 1;                        }                    }                }            } else if (sortNumbers[idx] == true) { // 数値型ソート                // 数値変換エラーは最後尾                try {                    num1 = Double.parseDouble(data1Str);                } catch (Exception e) {                    if(sortTypes[idx] == 1){                        // ASC                        return 1;                    }else{                        // DESC                        return -1;                    }                }                try {                    num2 = Double.parseDouble(data2Str);                } catch (Exception e) {                    if(sortTypes[idx] == 1){                        // ASC                        return -1;                    }else{                        // DESC                        return 1;                    }                }                // 比較処理                if(sortTypes[idx] == 1){                    // ASC                    if (num1 > num2) {                        return 1;                    } else if (num1 < num2) {                        return -1;                    }                } else {                    // DESC                    if (num1 > num2) {                        return -1;                    } else if (num1 < num2) {                        return 1;                    }                }            }            // 第一ソートでは同値のため第二ソートを使いループする        }        if (allNull) return -1;        return 0;    }}