package femtodb.core.util;import femtodb.core.*;/**  * FemtoUtilクラス<br> * * @author Takahiro Iwase * @license Apache License 2.0  */public class FemtoUtil {    private static Runtime runtime = Runtime.getRuntime();    private static int useMemSizeCache = 0;    private FemtoUtil() {}    static {        UtilWorker utilWorker = new UtilWorker();        utilWorker.start();    }    public static final String replaceKeyString(String key) {        if (key == null) return "null";                key = key.replaceAll("\r\n", "<femtobr>");        key = key.replaceAll("\r", "<femtobr>");        key = key.replaceAll("\n", "<femtobr>");        key = key.replaceAll("\t", "<femtotab>");        return key;    }    public static final String replaceValueString(String value) {        if (value == null) return "null";        value = value.replaceAll("\r\n", "<femtobr>");        value = value.replaceAll("\r", "<femtobr>");        value = value.replaceAll("\n", "<femtobr>");        value = value.replaceAll("\t", "<femtotab>");        return value;    }    // Old領域の使用割合を100分率で返す    public static final void updateJVMUseOldMemory() {        double useMem = (runtime.totalMemory() - runtime.freeMemory());        double usePercent = useMem / runtime.maxMemory();        double percentSize = 100;        usePercent = usePercent * percentSize;        Double useMemSize = new Double(usePercent);        useMemSizeCache = useMemSize.intValue();    }    public static final int getJVMUseOldMemory() {        return useMemSizeCache;    }    static class UtilWorker extends Thread {        public void run() {            while(true) {                try {                    if (FemtoDBConstants.FEMTODB_STOP) break;                    FemtoUtil.updateJVMUseOldMemory();                    Thread.sleep(1000);                } catch (Exception e) {}            }        }    }}