package test;import java.util.*;import femtodb.core.*;import femtodb.core.table.*;import femtodb.core.table.transaction.*;import femtodb.core.table.data.*;import femtodb.core.table.type.*;import femtodb.core.accessor.*;import femtodb.core.accessor.parameter.*;public class TestDataAccessor {    DataAccessor ac = null;    public static void main(String[] args) {        try {            TestDataAccessor test = new TestDataAccessor();            test.ac = new DataAccessor();            if (args[0].equals("1")) {                test.testCreateTable(args[1]);            } else if (args[0].equals("2")) {                test.testTransactionNo(args[1]);            } else if (args[0].equals("3")) {                test.testInsert(args[1]);            } else if (args[0].equals("4")) {                test.testSelectAll(args[1], Integer.parseInt(args[2]));            } else if (args[0].equals("5")) {                test.testSelectNormalWhere(args[1], Integer.parseInt(args[2]));            } else if (args[0].equals("6")) {                test.testRollback(args[1], Integer.parseInt(args[2]));            } else if (args[0].equals("7")) {                test.testUpdate(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("8")) {                test.testUpdateWhere1(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("9")) {                test.testUpdateWhere2(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("10")) {                test.testUpdateWhere3(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("11")) {                test.testUpdateWhere4(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("12")) {                test.testUpdateWhere5(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("13")) {                test.testUpdateWhere6(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("14")) {                test.testUpdateWhere7(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("15")) {                test.testUpdateWhere8(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("16")) {                test.testUpdateWhere9(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("17")) {                test.testDelete(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("18")) {                test.testDelete2(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("19")) {                test.testDelete3(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("20")) {                test.testDelete4(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("21")) {                test.testDelete5(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("22")) {                test.testDelete6(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("23")) {                test.testDelete7(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("24")) {                test.testStore1(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("25")) {                test.testStore2(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("26")) {                test.testStore3(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("27")) {                test.testStore4(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("28")) {                test.testStore5(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("29")) {                test.testStore6(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("30")) {                test.testStore7(args[1], Integer.parseInt(args[2]));            } else  if (args[0].equals("31")) {                test.testStore8(args[1], Integer.parseInt(args[2]));            }            System.out.println("stop");            Thread.sleep(10000);        } catch(Exception e) {            e.printStackTrace();        }    }    public void testCreateTable(String tableName) throws Exception {                TableInfo tbl = new TableInfo(tableName);        TableInfo tbl2 = new TableInfo(tableName+"2");        tbl2.addTableColumnInfo("column1", new ColumnTypeNumber());        tbl2.addTableColumnInfo("column2", new ColumnTypeVarchar());        tbl2.addTableColumnInfo("column3", new ColumnTypeVarchar());        tbl2.addTableColumnInfo("column4", new ColumnTypeNumber());        System.out.println("create 1 ret=" + ac.createTable(tbl));        System.out.println("create 2 ret=" + ac.createTable(tbl2));        TableInfo retTbl = ac.getTable(tableName);        System.out.println("TableInfo 1 =" + retTbl);        TableInfo retTbl2 = ac.getTable(tableName+"2");        System.out.println("TableInfo 2 =" + retTbl2);        TableDataTransfer tbldt = new TableDataTransfer();        tbldt.setColumnData("col1", "value1");        tbldt.setColumnData("col2", "value2");        tbldt.setColumnData("abc", "value3");        tbldt.setColumnData("123", "value4");        System.out.println(tbldt.getColumnData("col1"));        System.out.println(tbldt.getColumnData("col2"));        System.out.println(tbldt.getColumnData("abc"));        System.out.println(tbldt.getColumnData("123"));        System.out.println(tbldt.getColumnData("wqert"));    }    public void testTransactionNo(String tableName) throws Exception {        TableInfo tbl = new TableInfo(tableName);        ac.createTable(tbl);        TransactionNo tn = ac.createTransaction();        TransactionNo tn2 = ac.createTransaction();        TransactionNo tn3 = ac.createTransaction();        ac.commitTransaction(tn3);        System.out.println("TransactionNo1=" + tn);        System.out.println("TransactionNo2=" + tn2);        System.out.println("TransactionNo3=" + tn3);    }        public void testInsert(String tableName) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        tbl.addTableColumnInfo("col2", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        TransactionNo tn2 = ac.createTransaction();        TableDataTransfer tableDataTransfer1 = new TableDataTransfer();        tableDataTransfer1.setTransactionNo(tn1);        tableDataTransfer1.setColumnData("col1", "col1-1data");        tableDataTransfer1.setColumnData("col2", "col2-1data");        tableDataTransfer1.setColumnData("col3", "col3-1data");        System.out.println(ac.insertTableData(tableName, tn1, tableDataTransfer1));        TableDataTransfer tableDataTransfer2 = new TableDataTransfer();        tableDataTransfer2.setTransactionNo(tn1);        tableDataTransfer2.setColumnData("col1", "col1-2data");        tableDataTransfer2.setColumnData("col2", "col2-2data");        tableDataTransfer2.setColumnData("col3", "col3-2data");        System.out.println(ac.insertTableData(tableName, tn1, tableDataTransfer2));        TableDataTransfer tableDataTransfer3 = new TableDataTransfer();        tableDataTransfer3.setTransactionNo(tn2);        tableDataTransfer3.setColumnData("col1", "col1-3data");        tableDataTransfer3.setColumnData("col2", "col2-3data");        tableDataTransfer3.setColumnData("col3", "col3-3data");        System.out.println(ac.insertTableData(tableName, tn2, tableDataTransfer3));        TableDataTransfer tableDataTransfer4 = new TableDataTransfer();        tableDataTransfer4.setTransactionNo(tn2);        tableDataTransfer4.setColumnData("col1", "col1-4data");        tableDataTransfer4.setColumnData("col2", "col2-3data");        tableDataTransfer4.setColumnData("col3", "col3-4data");        System.out.println(ac.insertTableData(tableName, tn2, tableDataTransfer4));        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        System.out.println("---------------------------");        List ret1 = ac.selectTableDataList(sp, tn1);        System.out.println("SelectResult1 TN=1  ResultSize=" + ret1.size() +  " Result dump=" + ret1);        System.out.println("---------------------------");        List ret2 = ac.selectTableDataList(sp, tn2);        System.out.println("SelectResult2 TN=2  ResultSize=" + ret2.size() +  " Result dump=" + ret2);        System.out.println("---------------------------");        List ret3 = ac.selectTableDataList(sp, tn1);        System.out.println("SelectResult3 TN=1  ResultSize=" + ret3.size() +  " Result dump=" + ret3);        ac.commitTransaction(tn1);        ac.commitTransaction(tn2);        System.out.println("---------------------------");        List ret4 = ac.selectTableDataList(sp, tn2);        System.out.println("SelectResult4 TN=2  ResultSize=" + ret4.size() +  " Result dump=" + ret4);        System.out.println("---------------------------");        TransactionNo tn3 = ac.createTransaction();        List ret5 = ac.selectTableDataList(sp, tn3);        System.out.println("SelectResult5 TN=3  ResultSize=" + ret5.size() +  " Result dump=" + ret5);    }        public void testSelectAll(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("col2", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("col3", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("col4", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col5", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);//            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");                start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = ac.selectTableDataList(sp, tn1);        //System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        sp = new SelectParameter();        sp.setTableName(tableName);        ac.selectTableDataList(sp, tn1);        end =System.nanoTime();        System.out.println("commit2 select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        TransactionNo tn2 = ac.createTransaction();        sp = new SelectParameter();        sp.setTableName(tableName);        sp.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        //sp.addNormalWhereParameter("col3", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col3-123456789ABCDEFGHIJKLMNOPQRSTU-data.1"));        List ret = ac.selectTableDataList(sp, tn2);        end =System.nanoTime();        System.out.println("commit3 Index select time=" + ((end - start) / 1000) + " micro");        System.out.println("Result1 size=" + ret.size());        start =System.nanoTime();        sp = new SelectParameter();        sp.setTableName(tableName);        sp.addNormalWhereParameter("col2", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        List ret2 = ac.selectTableDataList(sp, tn2);        end =System.nanoTime();        System.out.println("commit4 select time=" + ((end - start) / 1000) + " micro");        System.out.println("Result2 size=" + ret2.size());    }            public void testSelectNormalWhere(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        tbl.addTableColumnInfo("memo", new ColumnTypeText());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        String[] memoL = new String[3];        memoL[0] = "フロントのメッセージロゴプリントがほどよいアクセントになったTシャツと、ティアードチュールスカートをドッキングしたようなワンピース。ボリューミーなボトムラインは、フェミニンなムードを盛り上げます♪1枚でカジュアルガーリーなスタイルを楽しめる優秀なアイテム";        memoL[1] = "ヌケ感あるクロシェニットと、繊細なレースを切り替えたタイトスカート。エレガントな雰囲気とこなれたニュアンスが好バランス！シンプルなシャツで大人にも、カジュアルなトップスでハズしてもキマル1枚です";        memoL[2] = "手書き風のアニマルモチーフをラインストーンやパールビーズで飾り、エレガントなニュアンスをプラスしたタンクトップ。合わせるアイテムを選ばないベーシックフォルムで、コーディネート力は抜群です。サラッとデニムシャツを羽織ってカジュアルに着こなすだけで、お洒落に決まること間違いなし";        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("memo", memoL[idx % 3]);            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data.col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("fax", new Integer(idx % 9999).toString());            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data.col6-123456789ABCDEFGHIJKLMNOPQRSTU-data.col6-123456789ABCDEFGHIJKLMNOPQRSTU-data.col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data.col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data.col8-123456789ABCDEFGHIJKLMNOPQRSTU-data.col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data.col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data.col10-123456789ABCDEFGHIJKLMNOPQRSTU-data.col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = ac.selectTableDataList(sp, tn1);        //System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        sp = new SelectParameter();        sp.setTableName(tableName);        ac.selectTableDataList(sp, tn1);        end =System.nanoTime();        System.out.println("commit2 select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        sp = new SelectParameter();        sp.setTableName(tableName);        sp.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        sp.addNormalWhereParameter("address", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col3-123456789ABCDEFGHIJKLMNOPQRSTU-data.1"));        List ret = ac.selectTableDataList(sp, tn1);        end =System.nanoTime();        System.out.println("no commit index and normal where  select time=" + ((end - start) / 1000) + " micro");        System.out.println("Result1 size=" + ret.size());        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        System.gc();        Thread.sleep(2000);        start =System.nanoTime();        ac.rebuildIndex(tableName);        end =System.nanoTime();        System.out.println("Rebuil index time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        sp = new SelectParameter();        sp.setTableName(tableName);        sp.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        sp.addNormalWhereParameter("address", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col3-123456789ABCDEFGHIJKLMNOPQRSTU-data.1"));        sp.addSortParameter("fax", 1, false);        List ret1 = ac.selectTableDataList(sp, tn2);        end =System.nanoTime();        System.out.println("commit index and normal where select time=" + ((end - start) / 1000) + " micro");        System.out.println("Result1 size=" + ret1.size());        start =System.nanoTime();        sp = new SelectParameter();        sp.setTableName(tableName);        sp.addNormalWhereParameter("address", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col3-123456789ABCDEFGHIJKLMNOPQRSTU-data.1"));        List ret2 = ac.selectTableDataList(sp, tn2);        end =System.nanoTime();        System.out.println("commit4 select normal where×1 time=" + ((end - start) / 1000) + " micro");        System.out.println("Result2 size=" + ret2.size());        System.gc();        start =System.nanoTime();        for (int i = 0; i < 100; i++) {            sp = new SelectParameter();            sp.setTableName(tableName);            sp.setIndexWhereParameter("memo", IWhereType.WHERE_TYPE_LIKE, new LikeWhereParameter("手書き"));            sp.addSortParameter("fax", 1, false);            sp.setLimit(10);            sp.setOffset(1);            List ret3 = ac.selectTableDataList(sp, tn2);        }        end =System.nanoTime();        System.out.println("commit5 select index where×1 and sort 100 Request time=" + ((end - start) / 1000) + " micro");//        System.out.println("Result3 size=" + ret3.size());        System.gc();    }    public void testRollback(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);//            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        //List list = ac.selectTableDataList(sp, tn1);        //System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.rollbackTransaction(tn1);        end =System.nanoTime();        System.out.println("rollback1 time=" + ((end - start) / 1000) + " micro");        list = ac.selectTableDataList(sp, tn1);        start =System.nanoTime();        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("rollback select1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        list = ac.selectTableDataList(sp, tn2);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("rollback select2 time=" + ((end - start) / 1000) + " micro");        System.gc();        Thread.sleep(15000);    }    public void testUpdate(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);//            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        UpdateParameter updateParameter = new UpdateParameter();        updateParameter.setTableName(tableName);        updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update"));                int updateRet = ac.updateTableData(updateParameter, tn2);        end =System.nanoTime();        System.out.println("update count = " + updateRet);        System.out.println("update time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.rollbackTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        try {            TransactionNo tn21 = ac.createTransaction();            UpdateParameter updateParameter2 = new UpdateParameter();            updateParameter2.setTableName(tableName);            updateParameter2.setUpdateParameter("school", new StringUpdateParameter("school-update2"));            int updateRet2 = ac.updateTableData(updateParameter2, tn21);            System.out.println("update result count = " + updateRet2);            ac.rollbackTransaction(tn21);        } catch (Exception e) {            e.printStackTrace();        }        try {            TransactionNo tn31 = ac.createTransaction();            UpdateParameter updateParameter2 = new UpdateParameter();            updateParameter2.setTableName(tableName);            updateParameter2.setUpdateParameter("school", new StringUpdateParameter("school-update3"));            int updateRet2 = ac.updateTableData(updateParameter2, tn31);            System.out.println("update result count = " + updateRet2);            ac.commitTransaction(tn31);        } catch (Exception e) {            e.printStackTrace();        }        TransactionNo tn3 = ac.createTransaction();        list = ac.selectTableDataList(sp, tn3);        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("school"));        }    }    public void testUpdateWhere1(String tableName, int dataSize) throws Exception {        DataAccessor ac = new DataAccessor();        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        UpdateParameter updateParameter = new UpdateParameter();        updateParameter.setTableName(tableName);        updateParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update"));                int updateRet = ac.updateTableData(updateParameter, tn2);        end =System.nanoTime();        System.out.println("update count = " + updateRet);        System.out.println("update time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn3 = ac.createTransaction();        list = ac.selectTableDataList(sp, tn3);        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " = " + tbldt.getColumnData("school"));        }    }    public void testUpdateWhere2(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        UpdateParameter updateParameter = new UpdateParameter();        updateParameter.setTableName(tableName);        updateParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update"));                int updateRet = ac.updateTableData(updateParameter, tn2);        end =System.nanoTime();        System.out.println("update count = " + updateRet);        System.out.println("update time=" + ((end - start) / 1000) + " micro");        TransactionNo tn3 = ac.createTransaction();        list = ac.selectTableDataList(sp, tn3);        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " = " + tbldt.getColumnData("school"));        }        System.out.println("-------------------------------------------------------------------------------");        start =System.nanoTime();        ac.commitTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        list = ac.selectTableDataList(sp, tn3);        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " = " + tbldt.getColumnData("school"));        }    }    public void testUpdateWhere3(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name2", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        UpdateParameter updateParameter = new UpdateParameter();        updateParameter.setTableName(tableName);        updateParameter.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        updateParameter.addNormalWhereParameter("name2", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update"));                int updateRet = ac.updateTableData(updateParameter, tn2);        end =System.nanoTime();        System.out.println("update count = " + updateRet);        System.out.println("update time=" + ((end - start) / 1000) + " micro");        TransactionNo tn3 = ac.createTransaction();        list = ac.selectTableDataList(sp, tn3);        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " = " + tbldt.getColumnData("school"));        }        System.out.println("-------------------------------------------------------------------------------");        start =System.nanoTime();        ac.commitTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        list = ac.selectTableDataList(sp, tn3);        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " = " + tbldt.getColumnData("school"));        }    }    public void testUpdateWhere4(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        for (int idx = 0; idx < 10; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col111");            tableDataTransfer1.setColumnData("name", "col222");            tableDataTransfer1.setColumnData("address", "col333");            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            if ((idx % 2) == 0) System.out.println(idx);            tableDataTransfer1.setColumnData("flg", "col444");            ac.insertTableData(tableName, tn1, tableDataTransfer1);        }        for (int idx = 0; idx < 10; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "colXXX");            tableDataTransfer1.setColumnData("name", "colZZZ");            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        UpdateParameter updateParameter = new UpdateParameter();        updateParameter.setTableName(tableName);        updateParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col111"));        updateParameter.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col222"));        updateParameter.addNormalWhereParameter("address", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col333"));        updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update"));                int updateRet = ac.updateTableData(updateParameter, tn2);        end =System.nanoTime();        System.out.println("update count = " + updateRet);        System.out.println("update time=" + ((end - start) / 1000) + " micro");        TransactionNo tn3 = ac.createTransaction();        list = ac.selectTableDataList(sp, tn3);        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("name") + " = " + tbldt.getColumnData("school"));        }        System.out.println("-------------------------------------------------------------------------------");        start =System.nanoTime();        ac.commitTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        list = ac.selectTableDataList(sp, tn3);        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("name") + " = " + tbldt.getColumnData("school"));        }    }    public void testUpdateWhere5(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        UpdateParameter updateParameter = new UpdateParameter();        updateParameter.setTableName(tableName);        updateParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update"));                int updateRet = ac.updateTableData(updateParameter, tn2);        end =System.nanoTime();        System.out.println("update count = " + updateRet);        System.out.println("update time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn3 = ac.createTransaction();        list = ac.selectTableDataList(sp, tn3);        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            //System.out.println(tbldt.getColumnData("col1") + " = " + tbldt.getColumnData("school"));        }    }    public void testUpdateWhere6(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        UpdateParameter updateParameter = new UpdateParameter();        updateParameter.setTableName(tableName);        updateParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update"));                int updateRet = ac.updateTableData(updateParameter, tn2);        end =System.nanoTime();        System.out.println("update count = " + updateRet);        System.out.println("update time=" + ((end - start) / 1000) + " micro");        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        sp2.addNormalWhereParameter("school", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("school-update"));        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn2);        end =System.nanoTime();        System.out.println("no commit search time=" + ((end - start) / 1000) + " micro Result="+list.size());        start =System.nanoTime();        ac.rollbackTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        SelectParameter sp3 = new SelectParameter();        sp3.setTableName(tableName);        sp3.addNormalWhereParameter("school", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("school-update"));        start =System.nanoTime();        list = ac.selectTableDataList(sp3, tn2);        end =System.nanoTime();        System.out.println("commit search time=" + ((end - start) / 1000) + " micro Result="+list.size());    }    public void testUpdateWhere7(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        UpdateParameter updateParameter = new UpdateParameter();        updateParameter.setTableName(tableName);        updateParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update"));                int updateRet = ac.updateTableData(updateParameter, tn2);        end =System.nanoTime();        System.out.println("update count = " + updateRet);        System.out.println("update time=" + ((end - start) / 1000) + " micro");        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        sp2.addNormalWhereParameter("school", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("school-update"));        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn2);        end =System.nanoTime();        System.out.println("no commit search time=" + ((end - start) / 1000) + " micro Result="+list.size());        start =System.nanoTime();        ac.rollbackTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        SelectParameter sp3 = new SelectParameter();        sp3.setTableName(tableName);        start =System.nanoTime();        list = ac.selectTableDataList(sp3, tn2);        end =System.nanoTime();        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " = " + tbldt.getColumnData("school"));        }        System.out.println("commit search time=" + ((end - start) / 1000) + " micro Result="+list.size());    }        public void testUpdateWhere8(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        UpdateParameter updateParameter = new UpdateParameter();        updateParameter.setTableName(tableName);        updateParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));        updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update"));                int updateRet = ac.updateTableData(updateParameter, tn2);        end =System.nanoTime();        System.out.println("update count = " + updateRet);        System.out.println("update time=" + ((end - start) / 1000) + " micro");        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        sp2.addNormalWhereParameter("school", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("school-update"));        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn2);        end =System.nanoTime();        System.out.println("no commit search time=" + ((end - start) / 1000) + " micro Result="+list.size());        start =System.nanoTime();        ac.rollbackTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        SelectParameter sp3 = new SelectParameter();        TransactionNo tn3 = ac.createTransaction();        sp3.setTableName(tableName);        start =System.nanoTime();        list = ac.selectTableDataList(sp3, tn3);        end =System.nanoTime();        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " = " + tbldt.getColumnData("school"));        }        System.out.println("commit search time=" + ((end - start) / 1000) + " micro Result="+list.size());    }        public void testUpdateWhere9(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        TransactionNo tn3 = ac.createTransaction();        try {            UpdateParameter updateParameter = new UpdateParameter();            updateParameter.setTableName(tableName);            updateParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.33"));            updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update11111"));                        int updateRet = ac.updateTableData(updateParameter, tn2);            System.out.println("update ret1=" + updateRet);            UpdateParameter updateParameter2 = new UpdateParameter();            updateParameter2.setTableName(tableName);            updateParameter2.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.44"));            updateParameter2.setUpdateParameter("school", new StringUpdateParameter("school-update22222"));            int updateRet2 = ac.updateTableData(updateParameter2, tn3);            System.out.println("update ret2=" + updateRet2);        } catch (Exception ee) {}        ac.commitTransaction(tn2);        ac.commitTransaction(tn3);                SelectParameter sp4 = new SelectParameter();        TransactionNo tn4 = ac.createTransaction();        sp4.setTableName(tableName);        start =System.nanoTime();        list = ac.selectTableDataList(sp4, tn4);        end =System.nanoTime();        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " = " + tbldt.getColumnData("school"));        }    }    public void testDelete(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        DeleteParameter deleteParameter = new DeleteParameter();        deleteParameter.setTableName(tableName);                int deleteRet = ac.deleteTableData(deleteParameter, tn2);        end =System.nanoTime();        System.out.println("delete count = " + deleteRet);        System.out.println("delete time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn3 = ac.createTransaction();        list = ac.selectTableDataList(sp, tn3);        System.out.println("delete after size= "+list.size());        ac.rebuildIndex(tableName);    }    public void testDelete2(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        DeleteParameter deleteParameter = new DeleteParameter();        deleteParameter.setTableName(tableName);                int deleteRet = ac.deleteTableData(deleteParameter, tn2);        end =System.nanoTime();        System.out.println("delete count = " + deleteRet);        System.out.println("delete time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.rollbackTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn3 = ac.createTransaction();        list = ac.selectTableDataList(sp, tn3);        System.out.println("delete after size= "+list.size());        ac.rebuildIndex(tableName);    }    public void testDelete3(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        DeleteParameter deleteParameter = new DeleteParameter();        deleteParameter.setTableName(tableName);                int deleteRet = ac.deleteTableData(deleteParameter, tn2);        end =System.nanoTime();        System.out.println("delete count = " + deleteRet);        System.out.println("delete time=" + ((end - start) / 1000) + " micro");        ac.rebuildIndex(tableName);        start =System.nanoTime();        ac.rollbackTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");            TransactionNo tn3 = ac.createTransaction();        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        sp2.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn3);        end =System.nanoTime();                System.out.println("delete after size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");    }    public void testDelete4(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        DeleteParameter deleteParameter = new DeleteParameter();        deleteParameter.setTableName(tableName);        deleteParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        int deleteRet = ac.deleteTableData(deleteParameter, tn2);        end =System.nanoTime();        System.out.println("delete count = " + deleteRet);        System.out.println("delete time=" + ((end - start) / 1000) + " micro");        ac.rebuildIndex(tableName);        TransactionNo tn3 = ac.createTransaction();        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        sp2.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn3);        end =System.nanoTime();        System.out.println("delete commit before tn3 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        SelectParameter sp4 = new SelectParameter();        sp4.setTableName(tableName);        sp4.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp4, tn2);        end =System.nanoTime();        System.out.println("delete commit before tn2 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn3);        end =System.nanoTime();        System.out.println("delete commit after size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");            SelectParameter sp3 = new SelectParameter();        sp3.setTableName(tableName);        start =System.nanoTime();        list = ac.selectTableDataList(sp3, tn3);        end =System.nanoTime();        System.out.println("delete commit after all size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");    }    public void testDelete5(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        DeleteParameter deleteParameter = new DeleteParameter();        deleteParameter.setTableName(tableName);        deleteParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        int deleteRet = ac.deleteTableData(deleteParameter, tn2);        end =System.nanoTime();        System.out.println("delete count = " + deleteRet);        System.out.println("delete time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.rollbackTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn3 = ac.createTransaction();        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        sp2.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn3);        end =System.nanoTime();        System.out.println("delete rollback after tn3 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        SelectParameter sp4 = new SelectParameter();        sp4.setTableName(tableName);        sp4.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp4, tn2);        end =System.nanoTime();        System.out.println("delete rollback after tn2 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        ac.rebuildIndex(tableName);        sp2 = new SelectParameter();        sp2.setTableName(tableName);        sp2.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn3);        end =System.nanoTime();        System.out.println("delete rollback after tn3 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        sp4 = new SelectParameter();        sp4.setTableName(tableName);        sp4.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp4, tn2);        end =System.nanoTime();        System.out.println("delete rollback after tn2 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        SelectParameter sp5 = new SelectParameter();        sp5.setTableName(tableName);        start =System.nanoTime();        list = ac.selectTableDataList(sp5, tn2);        end =System.nanoTime();        System.out.println("delete rollback after tn2 all size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");    }    public void testDelete6(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        DeleteParameter deleteParameter = new DeleteParameter();        deleteParameter.setTableName(tableName);        deleteParameter.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        int deleteRet = ac.deleteTableData(deleteParameter, tn2);        end =System.nanoTime();        System.out.println("delete count = " + deleteRet);        System.out.println("delete time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.rollbackTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn3 = ac.createTransaction();        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        sp2.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn3);        end =System.nanoTime();        System.out.println("delete rollback after tn3 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        SelectParameter sp4 = new SelectParameter();        sp4.setTableName(tableName);        sp4.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp4, tn2);        end =System.nanoTime();        System.out.println("delete rollback after tn2 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        ac.rebuildIndex(tableName);        sp2 = new SelectParameter();        sp2.setTableName(tableName);        sp2.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn3);        end =System.nanoTime();        System.out.println("delete rollback after tn3 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        sp4 = new SelectParameter();        sp4.setTableName(tableName);        sp4.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp4, tn2);        end =System.nanoTime();        System.out.println("delete rollback after tn2 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        SelectParameter sp5 = new SelectParameter();        sp5.setTableName(tableName);        start =System.nanoTime();        list = ac.selectTableDataList(sp5, tn2);        end =System.nanoTime();        System.out.println("delete rollback after tn2 all size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");    }    public void testDelete7(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("name", "col2-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 100));            tableDataTransfer1.setColumnData("address", "col3-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));            tableDataTransfer1.setColumnData("school", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + (idx % 3));//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        TransactionNo tn2 = ac.createTransaction();        start =System.nanoTime();        DeleteParameter deleteParameter = new DeleteParameter();        deleteParameter.setTableName(tableName);        deleteParameter.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        int deleteRet = ac.deleteTableData(deleteParameter, tn2);        end =System.nanoTime();        System.out.println("delete count = " + deleteRet);        System.out.println("delete time=" + ((end - start) / 1000) + " micro");        SelectParameter sp4 = new SelectParameter();        sp4.setTableName(tableName);        sp4.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp4, tn2);        end =System.nanoTime();        System.out.println("delete commit before tn2 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        TransactionNo tn3 = ac.createTransaction();        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        sp2.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn3);        end =System.nanoTime();        System.out.println("delete commit before tn3 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        ac.commitTransaction(tn2);        end =System.nanoTime();        System.out.println("commit2 time=" + ((end - start) / 1000) + " micro");        sp4 = new SelectParameter();        sp4.setTableName(tableName);        sp4.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp4, tn2);        end =System.nanoTime();        System.out.println("delete commit after tn2 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        ac.rebuildIndex(tableName);        sp2 = new SelectParameter();        sp2.setTableName(tableName);        sp2.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp2, tn3);        end =System.nanoTime();        System.out.println("delete commit after tn3 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        sp4 = new SelectParameter();        sp4.setTableName(tableName);        sp4.addNormalWhereParameter("name", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col2-123456789ABCDEFGHIJKLMNOPQRSTU-data.4"));        start =System.nanoTime();        list = ac.selectTableDataList(sp4, tn2);        end =System.nanoTime();        System.out.println("delete commit after tn2 size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");        SelectParameter sp5 = new SelectParameter();        sp5.setTableName(tableName);        start =System.nanoTime();        list = ac.selectTableDataList(sp5, tn2);        end =System.nanoTime();        System.out.println("delete commit after tn2 all size= "+list.size() +" time=" + ((end - start) / 1000) + " micro");    }    public void testStore1(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1." + (idx % 100));            tableDataTransfer1.setColumnData("name", "name." + idx);            tableDataTransfer1.setColumnData("address", "address." + idx);            tableDataTransfer1.setColumnData("school", "school." + idx);//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        sp.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1.33"));        List list = null;        list = ac.selectTableDataList(sp, tn1);/*        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " : " + tbldt.getColumnData("name") + " : "  + tbldt.getColumnData("address") + " : "  + tbldt.getColumnData("school"));        }*/        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        ac.endTransaction(tn1);    }    public void testStore2(String tableName, int dataSize) throws Exception {        long start =System.nanoTime();                    long end =System.nanoTime();                TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        ac.rebuildIndex(tableName);        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        sp.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1.33"));        List list = null;        list = ac.selectTableDataList(sp, tn1);/*        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " : " + tbldt.getColumnData("name") + " : "  + tbldt.getColumnData("address") + " : "  + tbldt.getColumnData("school"));        }*/        System.out.println("select count = " + list.size());        end =System.nanoTime();        System.out.println("no commit select time=" + ((end - start) / 1000) + " micro");        ac.endTransaction(tn1);    }    public void testStore3(String tableName, int dataSize) throws Exception {        long start =System.nanoTime();            long end =System.nanoTime();        TransactionNo tn1 = ac.createTransaction();        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        List list = null;        list = ac.selectTableDataList(sp, tn1);        System.out.println("select ret="+list.size());        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " : " + tbldt.getColumnData("name") + " : "  + tbldt.getColumnData("address") + " : "  + tbldt.getColumnData("school"));        }        ac.endTransaction(tn1);    }    public void testStore4(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1." + (idx % 100));            tableDataTransfer1.setColumnData("name", "name." + idx);            tableDataTransfer1.setColumnData("address", "address." + idx);            tableDataTransfer1.setColumnData("school", "school." + idx);//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        sp.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1.33"));        List list = null;        list = ac.selectTableDataList(sp, tn1);/*        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " : " + tbldt.getColumnData("name") + " : "  + tbldt.getColumnData("address") + " : "  + tbldt.getColumnData("school"));        }*/        System.out.println("select count = " + list.size());        // Delete        TransactionNo tn2 = ac.createTransaction();        DeleteParameter deleteParameter = new DeleteParameter();        deleteParameter.setTableName(tableName);        int deleteRet = ac.deleteTableData(deleteParameter, tn2);        System.out.println("deleteRet=" +deleteRet);        ac.commitTransaction(tn2);System.out.println("////////////////////");        TransactionNo tn4 = ac.createTransaction();        DeleteParameter deleteParameter4 = new DeleteParameter();        deleteParameter4.setTableName(tableName);        int deleteRet4 = ac.deleteTableData(deleteParameter4, tn4);        System.out.println("deleteRet=" +deleteRet4);        ac.commitTransaction(tn4);////////////////////////////        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        list = ac.selectTableDataList(sp2, tn2);        System.out.println("Select ret=" +list.size());        ac.endTransaction(tn1);        ac.endTransaction(tn2);    }    public void testStore5(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1." + (idx % 100));            tableDataTransfer1.setColumnData("name", "name." + idx);            tableDataTransfer1.setColumnData("address", "address." + (idx % 100));            tableDataTransfer1.setColumnData("school", "school." + idx);//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        sp.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1.33"));        List list = null;        list = ac.selectTableDataList(sp, tn1);/*        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " : " + tbldt.getColumnData("name") + " : "  + tbldt.getColumnData("address") + " : "  + tbldt.getColumnData("school"));        }*/        System.out.println("select count = " + list.size());        // Delete        TransactionNo tn2 = ac.createTransaction();        DeleteParameter deleteParameter = new DeleteParameter();        deleteParameter.setTableName(tableName);        deleteParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1.33"));        int deleteRet = ac.deleteTableData(deleteParameter, tn2);        System.out.println("deleteRet=" +deleteRet);        ac.commitTransaction(tn2);        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        list = ac.selectTableDataList(sp2, tn2);        System.out.println("Select ret=" +list.size());        ac.endTransaction(tn1);        ac.endTransaction(tn2);    }    public void testStore6(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1." + (idx % 100));            tableDataTransfer1.setColumnData("name", "name." + idx);            tableDataTransfer1.setColumnData("address", "address." + (idx % 100));            tableDataTransfer1.setColumnData("school", "school." + idx);//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        sp.addNormalWhereParameter("address", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("address.44"));        List list = null;        list = ac.selectTableDataList(sp, tn1);/*        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " : " + tbldt.getColumnData("name") + " : "  + tbldt.getColumnData("address") + " : "  + tbldt.getColumnData("school"));        }*/        System.out.println("select count = " + list.size());        // Delete        TransactionNo tn2 = ac.createTransaction();        DeleteParameter deleteParameter = new DeleteParameter();        deleteParameter.setTableName(tableName);        deleteParameter.addNormalWhereParameter("address", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("address.44"));        int deleteRet = ac.deleteTableData(deleteParameter, tn2);        System.out.println("deleteRet=" +deleteRet);        ac.commitTransaction(tn2);        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        list = ac.selectTableDataList(sp2, tn2);        System.out.println("Select ret=" +list.size());        ac.endTransaction(tn1);        ac.endTransaction(tn2);    }    public void testStore7(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1." + (idx % 100));            tableDataTransfer1.setColumnData("name", "name." + idx);            tableDataTransfer1.setColumnData("address", "address." + (idx % 100));            tableDataTransfer1.setColumnData("school", "school." + idx);//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        sp.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1.33"));        List list = null;        list = ac.selectTableDataList(sp, tn1);/*        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " : " + tbldt.getColumnData("name") + " : "  + tbldt.getColumnData("address") + " : "  + tbldt.getColumnData("school"));        }*/        System.out.println("select count = " + list.size());        // Delete        TransactionNo tn2 = ac.createTransaction();        UpdateParameter updateParameter = new UpdateParameter();        updateParameter.setTableName(tableName);        updateParameter.setIndexWhereParameter("col1", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("col1.33"));        updateParameter.setUpdateParameter("name", new StringUpdateParameter("name-update"));        updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update"));        int updateRet = ac.updateTableData(updateParameter, tn2);        System.out.println("updateRet=" +updateRet);        ac.commitTransaction(tn2);        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        list = ac.selectTableDataList(sp2, tn2);        System.out.println("Select ret=" +list.size());        ac.endTransaction(tn1);        ac.endTransaction(tn2);    }    public void testStore8(String tableName, int dataSize) throws Exception {        TableInfo tbl = new TableInfo(tableName);        tbl.addTableColumnInfo("col1", new ColumnTypeVarchar());        ac.createTable(tbl);        TransactionNo tn1 = ac.createTransaction();        long start =System.nanoTime();        for (int idx = 0; idx < dataSize; idx++) {            TableDataTransfer tableDataTransfer1 = new TableDataTransfer();            tableDataTransfer1.setTransactionNo(tn1);            tableDataTransfer1.setColumnData("col1", "col1." + (idx % 100));            tableDataTransfer1.setColumnData("name", "name." + idx);            tableDataTransfer1.setColumnData("address", "address." + (idx % 100));            tableDataTransfer1.setColumnData("school", "school." + idx);//            tableDataTransfer1.setColumnData("tel", "col4-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);//            tableDataTransfer1.setColumnData("fax", "col5-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);/*            tableDataTransfer1.setColumnData("col6", "col6-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col7", "col7-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col8", "col8-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col9", "col9-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);            tableDataTransfer1.setColumnData("col10", "col10-123456789ABCDEFGHIJKLMNOPQRSTU-data." + idx);*/            ac.insertTableData(tableName, tn1, tableDataTransfer1);            if ((idx % 5000) == 0) System.out.println(idx);        }        long end =System.nanoTime();        System.out.println("insert time=" + ((end - start) / 1000 / 1000) + " milli");        start =System.nanoTime();        ac.commitTransaction(tn1);        end =System.nanoTime();        System.out.println("commit1 time=" + ((end - start) / 1000) + " micro");        start =System.nanoTime();        SelectParameter sp = new SelectParameter();        sp.setTableName(tableName);        sp.addNormalWhereParameter("address", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("address.44"));        List list = null;        list = ac.selectTableDataList(sp, tn1);/*        for (int i = 0; i < list.size(); i++) {            TableDataTransfer tbldt = (TableDataTransfer)list.get(i);            System.out.println(tbldt.getColumnData("col1") + " : " + tbldt.getColumnData("name") + " : "  + tbldt.getColumnData("address") + " : "  + tbldt.getColumnData("school"));        }*/        System.out.println("select count = " + list.size());        // Delete        TransactionNo tn2 = ac.createTransaction();        UpdateParameter updateParameter = new UpdateParameter();        updateParameter.setTableName(tableName);        updateParameter.addNormalWhereParameter("address", IWhereType.WHERE_TYPE_EQUAL, new EqualWhereParameter("address.33"));        updateParameter.setUpdateParameter("name", new StringUpdateParameter("name-update"));        updateParameter.setUpdateParameter("school", new StringUpdateParameter("school-update"));        int updateRet = ac.updateTableData(updateParameter, tn2);        System.out.println("updateRet=" +updateRet);        ac.commitTransaction(tn2);        SelectParameter sp2 = new SelectParameter();        sp2.setTableName(tableName);        list = ac.selectTableDataList(sp2, tn2);        System.out.println("Select ret=" +list.size());        ac.endTransaction(tn1);        ac.endTransaction(tn2);    }}